---
# added a check to verify if a file exist before downloading it in the next step.
- name: checking current haproxy.cfg from s3
  aws_s3:
    bucket: "{{ bucket }}"
    prefix: example/haproxy/haproxy.cfg
    mode: list
  register: haproxy_s3

# downloading the file if it does exist, otherwise skipping this step.
- name: downloading current haproxy.cfg from s3
  aws_s3:
    bucket: "{{ bucket }}"
    object: /example/haproxy/haproxy.cfg
    dest: roles/proxy/docker/haproxy.cfg
    mode: get
  when: (haproxy_s3.s3_keys | length>0 )

# creating the haproxy.cfg from the template and registers if there's any change.
- name: creating haproxy.cfg from template
  template:
    src: haproxy.cfg.j2
    dest: roles/proxy/docker/haproxy.cfg
  register: haproxy

# registering a docker tag based off the git log. if there was no change in the
# haproxy config then going to skip this step.
- name: registering tag for docker image
  command: git log --pretty=format:'%h' -n 1
  register: docker_image_tag
  when: haproxy.changed

# logging into ecr to be able to push the image in the next step. if there was
# no change on the haproxy config then going to skip this step.
- name: login to ecr
  shell: "eval $(aws ecr get-login --region {{ region }} --no-include-email)"
  when: haproxy.changed

# building and pusing the docker image of haproxy to the ecr. if there was
# no change on the haproxy config then going to skip this step.
- name: building and pushing docker image
  docker_image:
    build:
      path: roles/proxy/docker/.
    name: "{{ repository_name }}/haproxy-example"
    tag: "{{ docker_image_tag.stdout }}"
    push: yes
    source: build
    force: yes
  when: haproxy.changed

# creating a task definition with the docker image created in the last step.
# skipping if there was no change to the config.
- name: setting task definition
  ecs_taskdefinition:
    family: haproxy-example
    containers:
    - name: haproxy
      cpu: "{{ task_cpu }}"
      essential: true
      image: "{{ repository_name }}/haproxy-example:{{ docker_image_tag.stdout }}"
      memory: "{{ task_memory }}"
      portMappings:
      - containerPort: 80
        hostPort: 0
      logConfiguration:
        logDriver: awslogs
        options:
          awslogs-group: /ecs/example/haproxy
          awslogs-region: "{{ region }}"
          awslogs-stream-prefix: haproxy
    state: present
    region: "{{ region }}"
  register: task_output
  when: haproxy.changed

# updating the service to use the new task definition in the previous step.
# skipping if there was no change to the config.
- name: setting service
  ecs_service:
    name: haproxy-example
    cluster: "{{ ecs_cluster }}"
    task_definition: "{{ task_output.taskdefinition.family }}:{{ task_output.taskdefinition.revision }}"
    desired_count: 1
    region: "{{ region }}"
    load_balancers:
      - targetGroupArn: "{{ terraform_output.stdout | regex_replace('tg_arn = ', '') }}"
        containerName: haproxy
        containerPort: 80
    state: present
  when: haproxy.changed

# uploading the changed haproxy config to s3 for later checks, skipping if there
# was no change.
- name: uploading haproxy.cfg to s3 on change
  aws_s3:
    bucket: "{{ bucket }}"
    object: "/example/haproxy/haproxy.cfg"
    src: roles/proxy/docker/haproxy.cfg
    mode: put
  when: haproxy.changed
